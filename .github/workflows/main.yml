# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on: [push]

  # Allows you to run this workflow manually from the Actions tab
 
  
env:
  SOURCE_BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
  GOPRIVATE: github.com/voonik

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
            
      - name: Setup GO
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.3'
      - name: Setup Env Vars and work dir
        run: |
          test -d "GoLang/src/github.com/voonik/example" || mkdir -p "GoLang/src/github.com/voonik/example"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: GoLang/src/github.com/voonik/example
          
      - id: files
        uses: jitterbit/get-changed-files@v1
      - run: |
         echo ${{ steps.files.outputs.added_modified }}
        
      - name: Read Report
        id: report
        uses: juliangruber/read-file-action@v1
        with:
          path: ./GoLang/src/github.com/voonik/example/report.txt
      - name: Add commit comment
        run: |
          jq -nc '{"body": "${{ steps.report.outputs.content }}"}' | \
          curl -sL  -X POST -d @- \
            -H "Content-Type: application/json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments"

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          
          go env GOPATH
          export GG=$(pwd)
          cd GoLang
          ls
          cd src/github.com/voonik
          cd example
          bash run_test.sh
          go mod download
          go get -u github.com/jstemmer/go-junit-report
          go get github.com/mikefarah/yq/v4
          yq e '.dirs' coverignore.yaml
          echo ${{ steps.files.outputs.added_modified }}
          go test -v -covermode count -coverprofile=coverreport ./stringutil/... | go-junit-report > report.xml
          

          
      - name: RSpec Report
        uses: SonicGarden/rspec-report-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          json-path: GoLang/src/github.com/voonik/example/tmp/rspec_results.json
        if: always()

      - name: Install goveralls
        run: go install github.com/mattn/goveralls@latest
      - name: Send coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pwd
          cd GoLang/src/github.com/voonik/example
          goveralls -coverprofile=./coverreport -service=github
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        with:
          report_paths: '**/GoLang/src/github.com/voonik/example/*.xml'
          
          
          
